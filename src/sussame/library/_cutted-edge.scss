// Using the __validateUnit validator function to check if the argument has a unit.
// Don't try to understand the code below, but try to understand the logic of Polygon.

@mixin cutted-edge($params...){
  @if length($params) == 0 {
    $value: 20px;
    clip-path: polygon(
      0 #{__validateUnit($value)},
      #{__validateUnit($value)} 0,
      calc(100% - #{__validateUnit($value)}) 0,
      100% #{__validateUnit($value)},
      100% calc(100% - #{__validateUnit($value)}),
      calc(100% - #{__validateUnit($value)}) 100%,
      #{__validateUnit($value)} 100%,
      0 calc(100% - #{__validateUnit($value)})
    );
  } @else if length($params) == 1 {
      $value: nth($params, 1);
      clip-path: polygon(
        0 #{__validateUnit($value)},
        #{__validateUnit($value)} 0,
        calc(100% - #{__validateUnit($value)}) 0,
        100% #{__validateUnit($value)},
        100% calc(100% - #{__validateUnit($value)}),
        calc(100% - #{__validateUnit($value)}) 100%,
        #{__validateUnit($value)} 100%,
        0 calc(100% - #{__validateUnit($value)})
      );
  } @else if length($params) > 1 and length($params) < 5 {
      clip-path: polygon(
        0 #{__validateUnit(nth($params, 1))},  
        #{__validateUnit(nth($params, 1))} 0,
        calc(100% - #{__validateUnit(nth($params, 2))}) 0,
        100% #{__validateUnit(nth($params, 2))},
        100% calc(100% - #{__validateUnit(nth($params, 3))}),
        calc(100% - #{__validateUnit(nth($params, 3))}) 100%,
        #{__validateUnit(nth($params, 4))} 100%,
        0 calc(100% - #{__validateUnit(nth($params, 4))}
      )
    );
  }
}